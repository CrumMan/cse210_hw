using System.Collections.Concurrent;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text.Json;
using System.Text.Json.Nodes;

namespace Scripture_Memorizer
{
    public class Scripture

    {
        //Excactly what this class will hold as it's given scripture after the refrence is made
        private string scripture;

        //use refrence class to pull prompt the user to enter a scripture with required chapter book and verse
        private Refrence refrence = new Refrence();
        public void SetRef()
        {
            System.Console.WriteLine("What book of the Book of Mormon are you wanting to memorize? (for first nephi it must be 1 Nephi with the space and the capitalized name.)");
            string book = Console.ReadLine();
            int chapter = ParseToInt("Chapter");
            int verse = ParseToInt("(first) Verse");
            bool questionForEndVerse = false;
            int? endVerse = null;
            while (questionForEndVerse == false)
            {
                System.Console.WriteLine("Is their an more than one verse? y/n");
                string endVerseAnswer = Console.ReadLine();
                if (endVerseAnswer.ToLower() == "y")
                {
                    endVerse = ParseToInt("End Verse");
                    questionForEndVerse = true;
                }
                else if (endVerseAnswer.ToLower() == "n")
                {
                    questionForEndVerse = true;
                }

            }
            if (endVerse == null)
            {
                refrence.SetRefrence(book, chapter, verse);
            }
            else if (endVerse != null)
            {
                refrence.SetRefrence(book, chapter, verse, endVerse.Value);
            }
        }
        public string Ref()
        {
            return refrence.Text();
        }
        //Use load class to instate the book of mormon variable from the JSON
        private Loader bookOfMormonData = new Loader();
        private JsonElement data;
        //The JSON Heirarchy generated by claude
        //Root Object
        //└── "books" (array)
        // └── Book Object
        // ├── "book" (string)
        //└── "chapters" (array)
        //     └── Chapter Object
        //    ├── "chapter" (int)
        //    └── "verses" (array)
        //        └── Verse Object
        //        ├── "verse" (int)
        //        └── "text" (string)
        private void FindScripture(int i)
        {
            string referenceText = Ref();
            string refBook = refrence.GetBook();
            int chapter = refrence.GetChapter();
            int verse = i;
            var books = data.GetProperty("books");
            bool found = false;
            //create books in book
            while (!found)
            {
                foreach (var book in books.EnumerateArray())
                {
                    string bookName = book.GetProperty("book").GetString();
                    if (bookName == refBook)
                    {
                        var chapters = book.GetProperty("chapters");
                        foreach (var chapterObj in chapters.EnumerateArray())
                        {
                            int chapterI = chapterObj.GetProperty("chapter").GetInt32();
                            if (chapterI == chapter)
                            {
                                var verses = chapterObj.GetProperty("verses");
                                foreach (var verseObj in verses.EnumerateArray())
                                {
                                    int verseI = verseObj.GetProperty("verse").GetInt32();
                                    if (verseI == verse)
                                    {
                                        found = true;
                                        if (scripture == null)
                                        {
                                            scripture = verseObj.GetProperty("text").GetString();
                                        }
                                        else
                                        {
                                            scripture += $" {verseObj.GetProperty("text").GetString()}";
                                        }
                                        return;
                                    }
                                }

                            }
                        }
                    }
                }
                if (!found)
                {

                    System.Console.WriteLine($"{referenceText} is not found in the book of mormon please choose another book of mormon scripture.");
                    scripture = null;
                    refrence = new Refrence();
                    SetRef();
                    refBook = refrence.GetBook();
                    chapter = refrence.GetChapter();
                    verse = refrence.GetVerse();



                }
            }


        }
        public void SetScripture()
        {
            bool done = false;
            int i = refrence.GetVerse();
            do
            {
                FindScripture(i);
                i++;
                if (refrence.GetEndVerse() == null || i == refrence.GetEndVerse())
                {
                    done = true;
                }
            } while (!done);
        }

        public string GetScripture()
        {
            return scripture;
        }
        public Scripture()
        {
            SetRef();
            System.Console.WriteLine($"You have chosen to memorize {Ref()}");
            bookOfMormonData.LoadData();
            data = bookOfMormonData.GetData();
            SetScripture();
            System.Console.Clear();
            System.Console.WriteLine(Ref());
            System.Console.WriteLine(GetScripture());
            Console.ReadLine();
        }



        //method to make the getting an int for the scripture refrence easier
        public int ParseToInt(string Type)
        {
            int result;
            System.Console.WriteLine($"Please enter the number for the {Type}.");
            while (!int.TryParse(Console.ReadLine(), out result) || result < 1)
            {
                System.Console.WriteLine($"Please enter a number for the {Type}");
            }
            return result;
        }


    }
}